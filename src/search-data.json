[
    {"question": "Do I need to rewrite all my class components?", "answer": "No. There are no plans to remove classes from React — we all need to keep shipping products and can’t afford rewrites. We recommend trying Hooks in new code."},
    {"question": "What can I do with Hooks that I couldn’t with classes?", "answer": "Hooks offer a powerful and expressive new way to reuse functionality between components. “Building Your Own Hooks” provides a glimpse of what’s possible. This article by a React core team member dives deeper into the new capabilities unlocked by Hooks."},
    {"question": "How much of my React knowledge stays relevant?", "answer": "Hooks are a more direct way to use the React features you already know — such as state, lifecycle, context, and refs. They don’t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant."},
    {"question": "Should I use Hooks, classes, or a mix of both?", "answer": "When you’re ready, we’d encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don’t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs)."},
    {"question": "Can I install hub", "answer": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam tristique ipsum non lacus pulvinar blandit. Praesent porta in ligula id finibus. Vivamus eu pharetra risus, sit amet aliquet diam. Etiam fermentum scelerisque augue, a cursus diam iaculis ac. Sed sodales risus hendrerit dolor varius egesta"},
    {"question": "How to test components that use Hooks?", "answer": "From React’s point of view, a component using Hooks is just a regular component. If your testing solution doesn’t rely on React internals, testing components with Hooks shouldn’t be different from how you normally test components."},
    {"question": "Do Hooks replace render props and higher-order components?", "answer": "Often, render props and higher-order components render only a single child. We think Hooks are a simpler way to serve this use case. There is still a place for both patterns (for example, a virtual scroller component might have a renderItem prop, or a visual container component might have its own DOM structure). But in most cases, Hooks will be sufficient and can help reduce nesting in your tree."},
    {"question": "Do Hooks work with static typing?", "answer": "Importantly, custom Hooks give you the power to constrain React API if you’d like to type them more strictly in some way. React gives you the primitives, but you can combine them in different ways than what we provide out of the box."},
   
    { "question": "How to fix 'Failed to load next.config.js' error?", "answer": "See the error message in your terminal where you started next to see more context."},
    { "question": "How to use breakpoints in the debugger?", "answer": "You can set conditions in the Breakpoints window by right-clicking a breakpoint and selecting Settings, and then selecting Conditions."},
    { "question": "How to write accessible HTML?", "answer": "Our WAI-ARIA basics article will help to fill gaps in this."},
    { "question":  "How to embed video and audio content in web pages?", "answer": "We'll move it up a gear, looking at how to use HTML to embed video and audio content in web pages."},
    { "question": "How to fix 'Jest encountered an unexpected token' error?", "answer": "I'm wondering how did you find out which module was the problematic module?"},
    { "question": "What is IntelliSense in Visual Studio Code?", "answer": "IntelliSense is provided for JavaScript, TypeScript, JSON, HTML, CSS, SCSS, and Less out of the box."}
    
]